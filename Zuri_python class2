first_variable = {}
second_variable = ()
print(type(first_variable))
print(type(second_variable))
fruit_basket = {
    "mango": 40,
    "orange": 30,
    "pawpaw": 35,
    "pineapple": [1,2,4,6]
}
print(type([1,2,4,6]))
#you can create a list in a dict......
print(isinstance(fruit_basket, dict))
#isinstance give a true or false answer
print(isinstance(fruit_basket,list))

#You can access dictionary value by using their keys
mangoes = fruit_basket["mango"]
oranges = fruit_basket["orange"]
print("we have {} mangoes.".format(mangoes))
print(oranges)
print(mangoes)
print("we have {} oranges".format(oranges))

print("we have {} orange and {} mangoes".format(oranges, mangoes))

#apples = fruit_basket["apples"] #keyerror
mangoes = fruit_basket.get("apples", 0)
print("we have {} apples".format(mangoes))

all_fruit_keys = fruit_basket.get(0)
print(all_fruit_keys)
#making addittion or subtraction to int in the dictionary or making changes to a dict
new_fruit_basket = fruit_basket["mango"] -1
print(new_fruit_basket)
fruit_basket["mango"] = fruit_basket["mango"] -1
print(fruit_basket)
print("original fruit basket:", fruit_basket)

#Updating a dict
fruit_basket.update({"apples": 100})
print(fruit_basket)
print(fruit_basket.items())

#LOOP & ITERATION(while loop and for loop)
if "pineapple" in fruit_basket:
    print(True)
else:
    print(False)
if "gabbage" in fruit_basket:
    print(True)
else:
    print(False)
#Taking Out or deleting an item from dictionary.....
fruit_basket.pop("pineapple")
print(fruit_basket)

#Using the del key to delete an item from the list thou not advisable to use as it is disastrous
#del fruit_basket["pineapple"]
#fruit_basket.clear()
#print(fruit_basket)
#Clear will only erase and still have a reference of the item while del will wipe off everything cus del is distructive

#COPY OF DICTIONARY USING ASSIGNMENT OPERATOR
new_fruit_basket = fruit_basket
print("new fruit basket:", new_fruit_basket)
print("fruit Basket:", fruit_basket)
#To check if they are the same using reference id
print(id(new_fruit_basket))
print(id(fruit_basket))

#To make permanent copy of a dictionary
new_fruit_basket = fruit_basket.copy()
#new_fruit_basket = copy.deepcopy(fruit_basket)
#print(new_fruit_basket)
#print(fruit_basket)

#DICTIONARY IN DICTIONARY
fruit_basket = {
    "mangoes": 40,
    "oranges": 30,
    "pawpaw": 3,
    "pineapple": {"bad":10, "good":44}
}
print(new_fruit_basket)
print(fruit_basket)
print(id(new_fruit_basket))
print(id(fruit_basket))
#since we have a copy and already make changes to the dictionary, then the output will change now and the id will change

#CONDITIONALS
number = 10
if number > 10:
    print("YES number is greater or equalto 10")
elif number == 10:
    print("YES number is equal to 10")
else:
    print(f"{number} is not greater than 10")
print(True if number > 10 else False)

#LOOPS(statement that can be executed sequentially by going through iteration)(while loop and for loop)
names = ["Abioye", "Abdullahi", "Adewale"]
if isinstance(names, list):
    for name in names:
        print(name)

#ITERATING THROUGH STRINGS
for char in "mosquitoes":
    print(char)
print()
for char in "mosquitoes":
    if char == "u":
        break
    print(char)
print()
for char in "mosquitoes":
    if char == "u":
        continue
    print(char)
print()
for char in "mosquitoes":
    if char == "u":
        pass
    print(char)
print()
#Range function
for number in range(8):
    print(number)
print()
for number in range(2, 8):
    print(number)
print()
#Steps
for number in range(0, 50, 5):
    print(number)
else:
    print("Loop processing done!")
print()

food_1 = ["white_rice", "spagetti", "beans"]
food_compliment = ["stew", "egg", "bread"]
for food in food_1:
    for compliment in food_compliment:
        print(food, compliment)
else:
    print("loop processing done!")
#we can have as many for loops as possible but this practice is bad!
print()

#ENUMERATE
for index, food in enumerate(food_1):
    print("index -> {}, value -> {}".format(index,food))
print()

#FUNCTIONS(a block of code which only run when it is called)
def simple_function():
    print("Yah!!! first function")
simple_function()
print()

def simple_function(name):
    print(f"Hello {name}");
name_input = input("Enter your name:")

simple_function(name_input)
print()
def simple_function(firstname, lastname):
    print(f"Hello {firstname}, are you sure your lastname is {lastname}?")
first_name = input("Enter your firstname:")
last_name = input("Enter your lastname:")
simple_function(first_name, last_name)
print()

#ARGS
def people_names(*args):
    print(args)
first_name = "Abioye"
last_name = "Abdullahi"
people_names(first_name, last_name)
print()

def people_names(firstname, *args):
    print(firstname)
    last_name, middlename = args
    print(last_name)
    print(middlename)
first_name = "Wale"
last_name = "Bola"
middlename = "shola"
people_names(first_name, last_name, middlename)
#people_names(middlename=middlename, lastname=last_name, firstname=first_name)
print()

#KEYWORD ARGUMENT KWARGS
def people_name_new(*args, **kwargs):
    print(args)
    print(kwargs)
    print(kwargs.get("lastname"))
first_name = "Manny"
last_name = "johnson"
middlename = "Devs"

people_name_new(middlename=middlename,lastname=last_name, firstname=first_name)
print()
people_name_new("chioma", middlename=middlename, lastname=last_name, firstname=first_name)
print()
#CALLING A FUNCTION
def calling_function(func):
    func("jones", "franklin", middlename=middlename, lastname=last_name, firstname=first_name)
calling_function(people_name_new)
print()
#POWER FUNCTION
def square_function(value):
    return value **2
squared_value = square_function(10)
print(squared_value)

#LAMBDA FUNCTION(always returning a function and not a value)
def square_function(value):
    return value **2
squared_value = lambda x: x **2
print(squared_value(10))